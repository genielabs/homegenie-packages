<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ScriptSetup>
Program.AddOption("GPIO4",  "OFF", "GPIO04 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO17", "OFF", "GPIO17 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO18", "OFF", "GPIO18 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO21", "OFF", "GPIO21 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO22", "OFF", "GPIO22 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO23", "OFF", "GPIO23 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO24", "OFF", "GPIO24 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO25", "OFF", "GPIO25 (IN, OUT or OFF)", "text");
Program.Run();
</ScriptSetup>
  <ScriptSource>var moduleDomain = "RaspberryPi.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
var gpio4  = Program.Option("GPIO4").Value.ToLower();
var gpio17 = Program.Option("GPIO17").Value.ToLower();
var gpio18 = Program.Option("GPIO18").Value.ToLower();
var gpio21 = Program.Option("GPIO21").Value.ToLower();
var gpio22 = Program.Option("GPIO22").Value.ToLower();
var gpio23 = Program.Option("GPIO23").Value.ToLower();
var gpio24 = Program.Option("GPIO24").Value.ToLower();
var gpio25 = Program.Option("GPIO25").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
if (gpio4  != "off") pinMapping.Add(new { Config = gpio4, Address =  "GPIO4", Pin =  ConnectorPin.P1Pin7, Direction = ( gpio4.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio4.StartsWith("!") });
if (gpio17 != "off") pinMapping.Add(new { Config = gpio17, Address = "GPIO17", Pin = ConnectorPin.P1Pin11, Direction = (gpio17.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio17.StartsWith("!") });
if (gpio18 != "off") pinMapping.Add(new { Config = gpio18, Address = "GPIO18", Pin = ConnectorPin.P1Pin12, Direction = (gpio18.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio18.StartsWith("!") });
if (gpio21 != "off") pinMapping.Add(new { Config = gpio21, Address = "GPIO21", Pin = ConnectorPin.P1Pin13, Direction = (gpio21.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio21.StartsWith("!") });
if (gpio22 != "off") pinMapping.Add(new { Config = gpio22, Address = "GPIO22", Pin = ConnectorPin.P1Pin15, Direction = (gpio22.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio22.StartsWith("!") });
if (gpio23 != "off") pinMapping.Add(new { Config = gpio23, Address = "GPIO23", Pin = ConnectorPin.P1Pin16, Direction = (gpio23.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio23.StartsWith("!") });
if (gpio24 != "off") pinMapping.Add(new { Config = gpio24, Address = "GPIO24", Pin = ConnectorPin.P1Pin18, Direction = (gpio24.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio24.StartsWith("!") });
if (gpio25 != "off") pinMapping.Add(new { Config = gpio25, Address = "GPIO25", Pin = ConnectorPin.P1Pin22, Direction = (gpio25.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio25.StartsWith("!") });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  if (pc.Direction == PinDirection.Input)
  {
    configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    ((InputPinConfiguration)configuration[p]).Reversed = pc.Reversed;
    if (pc.Config.EndsWith("+"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
    }
    else if (pc.Config.EndsWith("-"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
    }
    Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  else
  {
    configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    ((OutputPinConfiguration)configuration[p]).Reversed = pc.Reversed;
    Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
  }
  configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
  connection = new GpioConnection(configuration);
}
catch 
{
  Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  Pause(10);
  return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  var address = args.Configuration.Name;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  module.RaiseEvent("Status.Level", args.Enabled ? "1" : "0", "Update GPIO Status.Level");

});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  var address = pc.Address;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var errorMessage = "";
  try
  {
    string address = reqs[1];
    string command = reqs[2];
    //
    switch(command)
    {
      // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
      case "Control.On":
      connection[address] = true;
      break;
      // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
      case "Control.Off":
      connection[address] = false;
      break;
      // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
      case "Control.Toggle":
      connection.Toggle(address);
      break;
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } 
  catch (Exception ex) 
  { 
    errorMessage = ex.Message + " " + ex.StackTrace;
  }
  // unable to process request
  return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>100</Address>
  <Name>GPIO Modules</Name>
  <Description>Raspberry Pi GPIO mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
Use IN+ to activate the internal PullUp resistor or IN- to activate the internal PullDown resistor.
Use !OUT or !IN+ or !IN- to Reverse the pin level On = 0 and Off = 1.
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1) or inverted in case of !IN.
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
  <Group>Raspberry Pi</Group>
  <Features />
  <AutoRestartEnabled>false</AutoRestartEnabled>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>
