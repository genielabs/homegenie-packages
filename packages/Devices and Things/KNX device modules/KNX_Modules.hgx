<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ScriptSetup>const string MODULES_DOMAIN = "HomeAutomation.KNX";
Program.Setup(() =&gt; {
  Program
    .AddOption("KnxLocalIp", "", "Local endpoint IP address (optional)", "text")
    .AddOption("KnxLocalPort","", "Local endpoint port (optional)", "text")
    .AddOption("KnxRemoteIp", "", "Remote endpoint IP address (optional)", "text")
    .AddOption("KnxRemotePort","", "Remote endpoint port (optional)", "text")
    // Create 5 virtual modules with the domain "HomeAutomation.KNX" and with address from 1 to 5
    .AddVirtualModules(MODULES_DOMAIN, "Light", "", 1, 5)
    .AddFeature(MODULES_DOMAIN, "Dimmer,Light,Sensor", "KNX.Address", "KNX Address", "text");
});
Program.Run();
</ScriptSetup>
  <ScriptSource>const string MODULES_DOMAIN = "HomeAutomation.KNX";
const string EVENT_DESCRIPTION = "KNX Module";

var localIp = Program.Option("KnxLocalIp").Value;
var localPort = (int)Program.Option("KnxLocalPort").DecimalValue;
var remoteIp = Program.Option("KnxRemoteIp").Value;
var remotePort = (int)Program.Option("KnxRemotePort").DecimalValue;

var knx = KnxClient;
if (!String.IsNullOrWhiteSpace(localIp) &amp;&amp; !String.IsNullOrWhiteSpace(remoteIp))
{
  knx.EndPoint(localIp, localPort &gt; 0 ? localPort : 3671, remoteIp, remotePort &gt; 0 ? remotePort : 3671);
}
else if (!String.IsNullOrWhiteSpace(localIp))
{
  if (localPort &gt; 0)  
  {
    knx.EndPoint(localIp, localPort);
  }
  else
  {
    knx.EndPoint(localIp);
  }
}

knx
  .Connect()
  .OnStatusReceived((address, status)=&gt;{ 
    // TODO: should update virtual module parameters
    Program.Notify("KNX Status", "Device " + address + " -&gt; " + status);
  })
  .OnEventReceived((address, status)=&gt;{ 
    // TODO: should update virtual module parameters
    Program.Notify("KNX Event", "Device " + address + " -&gt; " + status);
  });  

// - http://&lt;hg_address&gt;/api/HomeAutomation.KNX/...
When.WebServiceCallReceived(MODULES_DOMAIN, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    //string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
	var knxModules = Modules.InDomain(MODULES_DOMAIN);
    var module = knxModules.WithAddress(lightnumber).Get();
    var knxAddress = module.Parameter("KNX.Address");
    if (knxAddress == null)
    {
      return "{ 'ResponseValue' : 'ERROR: module KNX address not configured.' }";
    }
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.On
      case "Control.On":
      knx.Action(knxAddress.Value, true);
      module.RaiseEvent("Status.Level", "1", EVENT_DESCRIPTION);
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.Off
      case "Control.Off":
      knx.Action(knxAddress.Value, false);
      module.RaiseEvent("Status.Level", "0", EVENT_DESCRIPTION);
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.Toggle
      case "Control.Toggle":
      if (module.Parameter("Status.Level").DecimalValue == 0)
      {
        knx.Action(knxAddress.Value, true);
        module.RaiseEvent("Status.Level", "1", EVENT_DESCRIPTION);
      }
      else
      {
        knx.Action(knxAddress.Value, false);
        module.RaiseEvent("Status.Level", "0", EVENT_DESCRIPTION);
      }
      break;
    }
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 
    Program.Notify(MODULES_DOMAIN + " ERROR!", e.Message);
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>27</Address>
  <Name>KNX device modules</Name>
  <Description>Adds 5 virtual modules. KNX address of each device can be configured from the module options popup.</Description>
  <Group>Devices and Things</Group>
  <Features>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains>HomeAutomation.KNX</ForDomains>
      <ForTypes>Dimmer,Light,Sensor</ForTypes>
      <Property>KNX.Address</Property>
      <Description>KNX Address</Description>
    </ProgramFeature>
  </Features>
  <AutoRestartEnabled>false</AutoRestartEnabled>
  <ActivationTime>2020-06-15T20:54:13.507738Z</ActivationTime>
  <TriggerTime>2020-06-15T20:54:14.219676Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>
